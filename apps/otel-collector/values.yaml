# apps/otel-collector/values.yaml - ADD SERVICE TO EXISTING CONFIG

# 1. Set the deployment mode to daemonset.
mode: daemonset

# 2. Specify the collector image and version.
image:
  repository: otel/opentelemetry-collector-contrib
  tag: 0.131.0

# 3. Configure ports correctly.
ports:
  # Disable default port definitions to prevent conflicts
  otlp:
    enabled: false
  otlp-http:
    enabled: false
  # Define only the gRPC port we need with hostPort
  otlp-grpc:
    enabled: true
    containerPort: 4317
    hostPort: 4317
    protocol: TCP
    servicePort: 4317
  # Add HTTP port for completeness
  otlp-http-port:
    enabled: true
    containerPort: 4318
    hostPort: 4318
    protocol: TCP
    servicePort: 4318
  # Add metrics port for Prometheus scraping
  metrics:
    enabled: true
    containerPort: 8888
    protocol: TCP
    servicePort: 8888

# 4. CRITICAL: Add service configuration for ClusterIP access
service:
  enabled: true
  type: ClusterIP

# 5. Enable presets for Kubernetes log collection and metadata
presets:
  # Enable log collection from all Kubernetes pods
  logsCollection:
    enabled: false  # Explicitly disable
  # Enable Kubernetes metadata enrichment for all telemetry
  kubernetesAttributes:
    enabled: true
    # Extract pod labels and annotations for better correlation
    extractAllPodLabels: true
    extractAllPodAnnotations: true

# 6. Define the collector's pipeline configuration - OFFICIAL PATTERN
config:
  receivers:
    otlp:
      protocols:
        grpc:
          # OFFICIAL PATTERN: Use pod IP with hostPort mapping
          endpoint: 0.0.0.0:4317
        http:
          endpoint: 0.0.0.0:4318

  processors:
    batch:
      timeout: 5s
      send_batch_size: 2048
    memory_limiter:
      check_interval: 1s
      limit_mib: 512
      spike_limit_mib: 128

  exporters:
    # ENABLE DEBUG EXPORTER
    debug:
      verbosity: detailed
    
    # Exporter for TRACES -> Tempo
    otlp/tempo:
      endpoint: "tempo.monitoring.svc.cluster.local:4317"
      tls:
        insecure: true

    # Exporter for METRICS -> Prometheus
    prometheusremotewrite:
      endpoint: "http://prometheus-stack-kube-prom-prometheus.monitoring.svc.cluster.local:9090/api/v1/write"
      tls:
        insecure: true

    # Exporter for LOGS -> Loki  
    otlphttp:
      endpoint: "http://loki.monitoring.svc.cluster.local:3100/otlp"

  service:
    pipelines:
      traces:
        receivers: [otlp]
        processors: [memory_limiter, k8sattributes, batch]
        exporters: [debug, otlp/tempo]
      metrics:
        receivers: [otlp]
        processors: [memory_limiter, k8sattributes, batch]
        exporters: [debug, prometheusremotewrite]
      logs:
        receivers: [otlp]
        processors: [memory_limiter, k8sattributes, batch]
        exporters: [debug, otlphttp]

# 7. Resource limits for the collector
resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 512Mi

# 8. Security context
securityContext:
  runAsUser: 0  # Required to read host log files
  runAsGroup: 0
  privileged: false
  readOnlyRootFilesystem: false
  allowPrivilegeEscalation: false

# 9. Node selector and tolerations for DaemonSet deployment
nodeSelector: {}
tolerations:
  # Allow running on control plane nodes if needed
  - key: node-role.kubernetes.io/control-plane
    operator: Exists
    effect: NoSchedule
  - key: node-role.kubernetes.io/master
    operator: Exists
    effect: NoSchedule

# 10. Service monitor for Prometheus scraping
serviceMonitor:
  enabled: true
  labels:
    release: prometheus-stack
