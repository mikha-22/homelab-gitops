# apps/otel-collector/values.yaml - PROPER INFRASTRUCTURE AGENT USING PRESETS

# Deployment mode - DaemonSet for node-level collection
mode: daemonset

# Use contrib image for more receivers (required for host metrics)
image:
  repository: otel/opentelemetry-collector-contrib
  tag: 0.131.0

# Enable presets - the OFFICIAL way to configure infrastructure monitoring
presets:
  # Collect host metrics (CPU, memory, disk, network) from each node
  hostMetrics:
    enabled: true
  
  # Collect kubelet stats (pod/container metrics) from Kubernetes API
  kubeletMetrics:
    enabled: true
  
  # Add Kubernetes metadata to all telemetry
  kubernetesAttributes:
    enabled: true
    extractAllPodLabels: false     # Keep it lightweight
    extractAllPodAnnotations: false
  
  # Enable log collection from containers (excluding demo apps)
  logsCollection:
    enabled: true
    includeCollectorLogs: false    # Don't collect our own logs

# Resource limits appropriate for infrastructure agent
resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 200m
    memory: 256Mi

# Service for metrics scraping
service:
  enabled: true
  type: ClusterIP

# Configure where to send the data
config:
  exporters:
    # Send metrics to Prometheus
    prometheusremotewrite:
      endpoint: "http://prometheus-stack-kube-prom-prometheus.monitoring.svc.cluster.local:9090/api/v1/write"
      tls:
        insecure: true
      resource_to_telemetry_conversion:
        enabled: true
    
    # Send logs to Loki
    loki:
      endpoint: "http://loki.monitoring.svc.cluster.local:3100/loki/api/v1/push"
      tenant_id: "infrastructure"
    
    # Keep debug for troubleshooting
    debug:
      verbosity: basic

  processors:
    # Add resource attributes to identify this as infrastructure data
    resource:
      attributes:
        - key: deployment.environment
          value: homelab
          action: upsert
        - key: telemetry.source
          value: infrastructure-agent
          action: upsert
    
    # Filter out demo namespace logs to avoid duplication
    filter/exclude-demo:
      logs:
        log_record:
          - 'attributes["k8s.namespace.name"] == "otel-demo"'

  service:
    pipelines:
      # Metrics pipeline - presets will automatically add hostmetrics and kubeletstats receivers
      metrics:
        receivers: [hostmetrics, kubeletstats]  # These are added by presets
        processors: [k8sattributes, resource, batch]  # k8sattributes added by preset
        exporters: [prometheusremotewrite, debug]
      
      # Logs pipeline - preset adds filelog receiver for container logs
      logs:
        receivers: [filelog]  # Added by logsCollection preset
        processors: [k8sattributes, filter/exclude-demo, resource, batch]
        exporters: [loki, debug]

# Service monitor for Prometheus to scrape the collector's own metrics
serviceMonitor:
  enabled: true
  labels:
    release: prometheus-stack

# Tolerations to run on all nodes including control plane
tolerations:
  - operator: Exists
