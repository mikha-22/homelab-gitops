# apps/otel-collector/values.yaml - Conservative filtering approach

# Deployment mode - DaemonSet for node-level collection
mode: daemonset

# Use contrib image for more receivers (required for host metrics)
image:
  repository: otel/opentelemetry-collector-contrib
  tag: 0.131.0

# Enable presets - the OFFICIAL way to configure infrastructure monitoring
presets:
  # Collect host metrics (CPU, memory, disk, network) from each node
  hostMetrics:
    enabled: true
  
  # Collect kubelet stats (pod/container metrics) from Kubernetes API
  kubeletMetrics:
    enabled: true
  
  # Add Kubernetes metadata to all telemetry
  kubernetesAttributes:
    enabled: true
    extractAllPodLabels: false     # Keep it lightweight
    extractAllPodAnnotations: false
  
  # Enable log collection from containers (excluding demo apps)
  logsCollection:
    enabled: true
    includeCollectorLogs: false    # Don't collect our own logs

# Resource limits appropriate for infrastructure agent
resources:
  limits:
    # REDUCED: From 500m to 400m (conservative)
    cpu: 400m
    # REDUCED: From 512Mi to 384Mi (conservative)
    memory: 384Mi
  requests:
    cpu: 200m
    memory: 256Mi

# Service for metrics scraping
service:
  enabled: true
  type: ClusterIP

# Configure where to send the data
config:
  exporters:
    # Send metrics to Prometheus
    prometheusremotewrite:
      endpoint: "http://prometheus-stack-kube-prom-prometheus.monitoring.svc.cluster.local:9090/api/v1/write"
      tls:
        insecure: true
      resource_to_telemetry_conversion:
        enabled: true
    
    # Send logs to Loki via OTLP HTTP endpoint
    otlphttp:
      endpoint: "http://loki.monitoring.svc.cluster.local:3100/otlp"
      tls:
        insecure: true
    
    # Keep debug for troubleshooting
    debug:
      verbosity: basic

  processors:
    # CONSERVATIVE: Moderate trace sampling (keep 25% instead of 10%)
    probabilistic_sampler:
      hash_seed: 22
      sampling_percentage: 25  # Keep 25% of traces
    
    # CONSERVATIVE: Minimal log filtering (only filter the noisiest stuff)
    filter/exclude-minimal:
      logs:
        log_record:
          # Only filter the most repetitive/useless logs
          - 'body matches "GET /health 200"'           # Health check success only
          - 'body matches "GET /metrics 200"'          # Metrics endpoint success only
          - 'attributes["level"] == "debug" and body matches ".*processing.*"'  # Processing debug only
          - 'body matches ".*ping.*successful.*"'      # Successful ping logs
    
    # Add resource attributes to identify this as infrastructure data
    resource:
      attributes:
        - key: deployment.environment
          value: homelab
          action: upsert
        - key: telemetry.source
          value: infrastructure-agent
          action: upsert
    
    # CONSERVATIVE: Keep most attributes (only remove the highest cardinality ones)
    attributes/strip-minimal:
      actions:
        - key: k8s.pod.uid          # Still remove pod UIDs
          action: delete
        - key: process.pid          # Still remove process IDs
          action: delete
        # Keep container restart count and other useful attributes

    # CONSERVATIVE: Larger batch sizes to reduce processing overhead
    batch:
      timeout: 5s        # Moderate timeout
      send_batch_size: 1024  # Moderate batch size
      send_batch_max_size: 2048
    
    # Memory limiter to prevent OOM
    memory_limiter:
      check_interval: 1s
      limit_mib: 300  # Match container memory limit

  service:
    pipelines:
      # Metrics pipeline - presets will automatically add hostmetrics and kubeletstats receivers
      metrics:
        receivers: [hostmetrics, kubeletstats]  # These are added by presets
        processors: [k8sattributes, resource, batch]  # k8sattributes added by preset
        exporters: [prometheusremotewrite, debug]
      
      # Logs pipeline - preset adds filelog receiver for container logs
      logs:
        receivers: [filelog]  # Added by logsCollection preset
        processors: [k8sattributes, filter/exclude-minimal, attributes/strip-minimal, resource, batch]
        exporters: [otlphttp, debug]
        
      # Traces pipeline with conservative sampling
      traces:
        receivers: [otlp]
        processors: [memory_limiter, probabilistic_sampler, k8sattributes, resource, batch]
        exporters: [debug]  # Only debug for now, can add tempo later

# Service monitor for Prometheus to scrape the collector's own metrics
serviceMonitor:
  enabled: true
  labels:
    release: prometheus-stack
  # INCREASED: From 30s to 45s (reduce scraping frequency)
  interval: 45s

# Tolerations to run on all nodes including control plane
tolerations:
  - operator: Exists
