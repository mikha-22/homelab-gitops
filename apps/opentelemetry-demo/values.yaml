# apps/opentelemetry-demo/values.yaml
# This file is compatible with opentelemetry-demo chart version 0.37.2

# 1. Configure the OpenTelemetry Collector to send data to your LGTM stack.
opentelemetry-collector:
  enabled: true
  fullnameOverride: otel-collector
  config:
    receivers:
      otlp:
        protocols:
          grpc: {}
          http:
            cors:
              allowed_origins:
                - "http://*"
                - "https://*"

    processors:
      batch: {}
      memory_limiter:
        limit_mib: 512
        spike_limit_mib: 128
      groupbytrace:
        wait_duration: 3s
        num_traces: 1000
      transform:
        trace_statements:
          - context: resource
            statements:
              - set(attributes["service.name"], attributes["rootServiceName"]) where attributes["rootServiceName"] != nil
    
    connectors:
      spanmetrics: {}

    exporters:
      # Exporter for Tempo
      otlp/tempo:
        endpoint: "http://tempo.monitoring.svc.cluster.local:4317"
        tls:
          insecure: true
      
      # Exporter for Prometheus
      prometheusremotewrite:
        endpoint: "http://prometheus-stack-kube-prom-prometheus.monitoring.svc.cluster.local:9090/api/v1/write"
        remote_write_queue:
          enabled: true
          queue_size: 10000
          num_consumers: 5

      # Exporter for Loki
      loki:
        endpoint: "http://loki-gateway.monitoring.svc.cluster.local:3100/loki/api/v1/push"

      debug:
        verbosity: normal
        
    service:
      telemetry:
        metrics:
          address: "0.0.0.0:8888"
      pipelines:
        traces:
          receivers: [otlp]
          processors: [transform, memory_limiter, groupbytrace, batch]
          exporters: [spanmetrics, otlp/tempo, debug]
        metrics:
          receivers: [otlp, spanmetrics]
          processors: [memory_limiter, batch]
          exporters: [prometheusremotewrite, debug]
        logs:
          receivers: [otlp]
          processors: [memory_limiter, batch]
          exporters: [loki, debug]

# 2. Configure the demo components with resource limits and ingress.
components:
  frontend:
    resources:
      limits: { memory: "200Mi", cpu: "200m" }
      requests: { memory: "100Mi", cpu: "100m" }

  # NOTE: The component is named 'frontend-proxy' in the chart
  frontend-proxy:
    resources:
      limits: { memory: "100Mi", cpu: "100m" }
      requests: { memory: "50Mi", cpu: "50m" }
    ingress:
      enabled: true
      ingressClassName: traefik
      annotations:
        external-dns.alpha.kubernetes.io/target: "e0995bb5-0641-44ba-9ac6-533e678117a2.cfargotunnel.com"
        external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
        traefik.ingress.kubernetes.io/router.middlewares: "monitoring-security-headers@kubernetescrd"
      hosts:
        - host: "otel-demo.
