# apps/opentelemetry-demo/values.yaml - Final Configuration

# 1. Disable bundled observability tools.
jaeger:
  enabled: false
prometheus:
  enabled: false
grafana:
  enabled: false
opensearch:
  enabled: false

# 2. Configure the demo's built-in collector to forward data to our LGTM stack.
opentelemetry-collector:
  enabled: true
  config:
    exporters:
      otlp/tempo:
        endpoint: "tempo.monitoring.svc.cluster.local:4317"
        tls:
          insecure: true
      
      prometheusremotewrite:
        endpoint: "http://prometheus-stack-kube-prom-prometheus.monitoring.svc.cluster.local:9090/api/v1/write"
        
      otlphttp:
        endpoint: "http://loki.monitoring.svc.cluster.local:3100/otlp"

    service:
      pipelines:
        traces:
          receivers: [otlp]
          processors: [memory_limiter, batch]
          exporters: [otlp/tempo]
        metrics:
          receivers: [otlp]
          processors: [memory_limiter, batch]
          exporters: [prometheusremotewrite]
        logs:
          receivers: [otlp]
          processors: [memory_limiter, batch]
          exporters: [otlphttp]

# 3. Global configuration - No overrides needed, components will use their defaults 
#    to connect to the local collector enabled above.
default: {}

# 4. Configure components - Only ingress and resource limits are needed.
#    All OTel env vars are removed to allow services to use their default settings.
components:
  frontend-proxy:
    ingress:
      enabled: true
      ingressClassName: traefik
      annotations:
        external-dns.alpha.kubernetes.io/target: "e0995bb5-0641-44ba-9ac6-533e678117a2.cfargotunnel.com"
        external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
        traefik.ingress.kubernetes.io/router.middlewares: "monitoring-security-headers@kubernetescrd"
      hosts:
        - host: "otel-demo.milenika.dev"
          paths:
            - path: /
              pathType: Prefix
              port: 8080
      tls:
        - secretName: otel-demo-tls
          hosts:
            - "otel-demo.milenika.dev"

  # Resource limits for stability.
  ad:
    resources: { limits: { memory: "300Mi", cpu: "200m" }, requests: { memory: "180Mi", cpu: "100m" } }
  cart:
    resources: { limits: { memory: "200Mi", cpu: "200m" }, requests: { memory: "160Mi", cpu: "100m" } }
  checkout:
    resources: { limits: { memory: "200Mi", cpu: "200m" }, requests: { memory: "100Mi", cpu: "100m" } }
  currency:
    resources: { limits: { memory: "200Mi", cpu: "200m" }, requests: { memory: "100Mi", cpu: "100m" } }
  email:
    resources: { limits: { memory: "200Mi", cpu: "200m" }, requests: { memory: "100Mi", cpu: "100m" } }
  frontend:
    resources: { limits: { memory: "200Mi", cpu: "200m" }, requests: { memory: "100Mi", cpu: "100m" } }
  frontend-proxy:
    resources: { limits: { memory: "200Mi", cpu: "200m" }, requests: { memory: "100Mi", cpu: "100m" } }
  load-generator:
    resources: { limits: { memory: "200Mi", cpu: "200m" }, requests: { memory: "100Mi", cpu: "100m" } }
    env:
      - name: LOCUST_USERS
        value: "5"
      - name: LOCUST_SPAWN_RATE
        value: "1"
      - name: LOCUST_LOGLEVEL
        value: "INFO"
  payment:
    resources: { limits: { memory: "200Mi", cpu: "200m" }, requests: { memory: "100Mi", cpu: "100m" } }
  product-catalog:
    resources: { limits: { memory: "200Mi", cpu: "200m" }, requests: { memory: "100Mi", cpu: "100m" } }
  recommendation:
    resources: { limits: { memory: "500Mi", cpu: "200m" }, requests: { memory: "200Mi", cpu: "100m" } }
  shipping:
    resources: { limits: { memory: "200Mi", cpu: "200m" }, requests: { memory: "100Mi", cpu: "100m" } }
