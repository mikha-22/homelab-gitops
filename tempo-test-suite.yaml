# Tempo Testing Suite for Homelab
# This suite tests all major aspects of your Tempo deployment

---
# 1. Basic Health Check (Updated)
apiVersion: batch/v1
kind: Job
metadata:
  name: tempo-health-check
  namespace: monitoring
  labels:
    app: tempo-test
    test-type: health-check
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: health-check
        image: curlimages/curl:8.7.1
        command:
        - /bin/sh
        - -c
        - |
          echo "=== Tempo Health Check ==="
          echo "Testing Tempo readiness endpoint..."
          curl -f http://tempo.monitoring.svc.cluster.local:3200/ready || exit 1
          echo "✓ Tempo is ready"
          
          echo "Testing Tempo metrics endpoint..."
          curl -f http://tempo.monitoring.svc.cluster.local:3200/metrics || exit 1
          echo "✓ Tempo metrics available"
          
          # The /config endpoint is disabled by default in recent Tempo versions for security.
          # This check is commented out as it is expected to fail.
          # echo "Testing Tempo configuration endpoint..."
          # curl -f http://tempo.monitoring.svc.cluster.local:3200/config || exit 1
          # echo "✓ Tempo config accessible"
          
          echo "All health checks passed!"

---
# 2. OTLP HTTP Trace Injection Test
apiVersion: batch/v1
kind: Job
metadata:
  name: tempo-otlp-http-test
  namespace: monitoring
  labels:
    app: tempo-test
    test-type: otlp-http
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: otlp-http-test
        image: curlimages/curl:8.7.1
        command:
        - /bin/sh
        - -c
        - |
          echo "=== OTLP HTTP Trace Test ==="
          
          # Generate a test trace in OTLP JSON format
          TRACE_ID=$(openssl rand -hex 16)
          SPAN_ID=$(openssl rand -hex 8)
          START_TIME=$(($(date +%s) * 1000000000))
          END_TIME=$(($START_TIME + 1000000000))
          
          echo "Sending test trace with ID: $TRACE_ID"
          
          curl -X POST \
            http://tempo.monitoring.svc.cluster.local:4318/v1/traces \
            -H "Content-Type: application/json" \
            -d "{
              \"resourceSpans\": [{
                \"resource\": {
                  \"attributes\": [{
                    \"key\": \"service.name\",
                    \"value\": {\"stringValue\": \"tempo-test-service\"}
                  }, {
                    \"key\": \"service.version\",
                    \"value\": {\"stringValue\": \"1.0.0\"}
                  }]
                },
                \"scopeSpans\": [{
                  \"scope\": {
                    \"name\": \"tempo-test\",
                    \"version\": \"1.0.0\"
                  },
                  \"spans\": [{
                    \"traceId\": \"$TRACE_ID\",
                    \"spanId\": \"$SPAN_ID\",
                    \"name\": \"test-operation\",
                    \"kind\": 1,
                    \"startTimeUnixNano\": \"$START_TIME\",
                    \"endTimeUnixNano\": \"$END_TIME\",
                    \"attributes\": [{
                      \"key\": \"http.method\",
                      \"value\": {\"stringValue\": \"GET\"}
                    }, {
                      \"key\": \"http.url\",
                      \"value\": {\"stringValue\": \"https://example.com/test\"}
                    }, {
                      \"key\": \"http.status_code\",
                      \"value\": {\"intValue\": \"200\"}
                    }],
                    \"status\": {\"code\": 1}
                  }]
                }]
              }]
            }" || exit 1
          
          echo "✓ OTLP HTTP trace sent successfully"
          echo "Trace ID: $TRACE_ID"
          echo "Wait 10 seconds for ingestion..."
          sleep 10

---
# 3. Jaeger HTTP Trace Test
apiVersion: batch/v1
kind: Job
metadata:
  name: tempo-jaeger-http-test
  namespace: monitoring
  labels:
    app: tempo-test
    test-type: jaeger-http
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: jaeger-http-test
        image: curlimages/curl:8.7.1
        command:
        - /bin/sh
        - -c
        - |
          echo "=== Jaeger HTTP Trace Test ==="
          
          # Generate Jaeger-format trace
          TRACE_ID=$(openssl rand -hex 16)
          SPAN_ID=$(openssl rand -hex 8)
          START_TIME=$(($(date +%s) * 1000000))
          
          echo "Sending Jaeger trace with ID: $TRACE_ID"
          
          curl -X POST \
            http://tempo.monitoring.svc.cluster.local:14268/api/traces \
            -H "Content-Type: application/json" \
            -d "{
              \"data\": [{
                \"traceID\": \"$TRACE_ID\",
                \"spans\": [{
                  \"traceID\": \"$TRACE_ID\",
                  \"spanID\": \"$SPAN_ID\",
                  \"operationName\": \"jaeger-test-operation\",
                  \"startTime\": $START_TIME,
                  \"duration\": 1000000,
                  \"tags\": [{
                    \"key\": \"component\",
                    \"type\": \"string\",
                    \"value\": \"tempo-test\"
                  }, {
                    \"key\": \"http.method\",
                    \"type\": \"string\",
                    \"value\": \"POST\"
                  }, {
                    \"key\": \"http.status_code\",
                    \"type\": \"number\",
                    \"value\": 200
                  }],
                  \"process\": {
                    \"serviceName\": \"jaeger-test-service\",
                    \"tags\": [{
                      \"key\": \"hostname\",
                      \"type\": \"string\",
                      \"value\": \"test-host\"
                    }]
                  }
                }]
              }]
            }" || exit 1
          
          echo "✓ Jaeger HTTP trace sent successfully"
          echo "Trace ID: $TRACE_ID"

---
# 4. Application with OpenTelemetry Auto-Instrumentation
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tempo-test-app
  namespace: monitoring
  labels:
    app: tempo-test-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tempo-test-app
  template:
    metadata:
      labels:
        app: tempo-test-app
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
    spec:
      containers:
      - name: test-app
        image: grafana/xk6-client-tracing:v0.0.2
        ports:
        - containerPort: 8080
        env:
        # Configure OTLP exporter to send to Tempo
        - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
          value: "http://tempo.monitoring.svc.cluster.local:4318"
        - name: OTEL_EXPORTER_OTLP_TRACES_PROTOCOL
          value: "http/protobuf"
        - name: OTEL_SERVICE_NAME
          value: "tempo-test-app"
        - name: OTEL_SERVICE_VERSION
          value: "1.0.0"
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: "service.name=tempo-test-app,service.version=1.0.0,deployment.environment=homelab"
        # Enable auto-instrumentation
        - name: OTEL_TRACES_EXPORTER
          value: "otlp"
        - name: OTEL_METRICS_EXPORTER
          value: "none"
        - name: OTEL_LOGS_EXPORTER
          value: "none"
        command:
        - /bin/sh
        - -c
        - |
          echo "Starting instrumented test application..."
          # Create a simple HTTP server that generates traces
          cat > server.py << 'EOF'
          import http.server
          import socketserver
          import json
          import time
          import random
          import os
          from urllib.parse import urlparse, parse_qs
          
          class TracingHandler(http.server.BaseHTTPRequestHandler):
              def do_GET(self):
                  if self.path == "/health":
                      self.send_response(200)
                      self.send_header('Content-type', 'application/json')
                      self.end_headers()
                      self.wfile.write(json.dumps({"status": "healthy"}).encode())
                  elif self.path.startswith("/test"):
                      # Simulate some work with random delay
                      delay = random.uniform(0.1, 0.5)
                      time.sleep(delay)
                      
                      self.send_response(200)
                      self.send_header('Content-type', 'application/json')
                      self.end_headers()
                      
                      response = {
                          "message": "Test endpoint hit",
                          "timestamp": time.time(),
                          "delay": delay,
                          "trace_info": "Check Grafana for traces!"
                      }
                      self.wfile.write(json.dumps(response).encode())
                  else:
                      self.send_response(404)
                      self.end_headers()
                      
              def log_message(self, format, *args):
                  # Add trace correlation to logs
                  print(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] {format % args}")
          
          PORT = 8080
          with socketserver.TCPServer(("", PORT), TracingHandler) as httpd:
              print(f"Test server running on port {PORT}")
              print("Endpoints:")
              print("  /health - Health check")
              print("  /test - Generate test traces")
              httpd.serve_forever()
          EOF
          
          python3 server.py
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi

---
apiVersion: v1
kind: Service
metadata:
  name: tempo-test-app
  namespace: monitoring
  labels:
    app: tempo-test-app
spec:
  selector:
    app: tempo-test-app
  ports:
  - port: 8080
    targetPort: 8080
    name: http

---
# 5. Trace Query Test Job
apiVersion: batch/v1
kind: Job
metadata:
  name: tempo-query-test
  namespace: monitoring
  labels:
    app: tempo-test
    test-type: query
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: query-test
        image: curlimages/curl:8.7.1
        command:
        - /bin/sh
        - -c
        - |
          echo "=== Tempo Query Test ==="
          
          echo "Testing Tempo search API..."
          curl -s "http://tempo.monitoring.svc.cluster.local:3200/api/search?tags=service.name%3Dtempo-test-service" \
            | head -20
          
          echo ""
          echo "Testing Tempo services API..."
          curl -s "http://tempo.monitoring.svc.cluster.local:3200/api/search/tags" \
            | head -20
          
          echo ""
          echo "✓ Query tests completed"

---
# 6. Load Generator for Continuous Testing
apiVersion: batch/v1
kind: Job
metadata:
  name: tempo-load-generator
  namespace: monitoring
  labels:
    app: tempo-test
    test-type: load
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: load-generator
        image: curlimages/curl:8.7.1
        command:
        - /bin/sh
        - -c
        - |
          echo "=== Tempo Load Generation Test ==="
          
          # Generate multiple traces over time
          for i in $(seq 1 10); do
            TRACE_ID=$(openssl rand -hex 16)
            SPAN_ID=$(openssl rand -hex 8)
            START_TIME=$(($(date +%s) * 1000000000))
            END_TIME=$(($START_TIME + $(($RANDOM % 1000000000 + 100000000))))
            
            SERVICE_NAME="load-test-service-$((i % 3))"
            OPERATION="operation-$((i % 5))"
            
            echo "Sending trace $i/10 - Service: $SERVICE_NAME, Operation: $OPERATION"
            
            curl -s -X POST \
              http://tempo.monitoring.svc.cluster.local:4318/v1/traces \
              -H "Content-Type: application/json" \
              -d "{
                \"resourceSpans\": [{
                  \"resource\": {
                    \"attributes\": [{
                      \"key\": \"service.name\",
                      \"value\": {\"stringValue\": \"$SERVICE_NAME\"}
                    }, {
                      \"key\": \"service.version\",
                      \"value\": {\"stringValue\": \"1.0.0\"}
                    }]
                  },
                  \"scopeSpans\": [{
                    \"scope\": {
                      \"name\": \"load-test\",
                      \"version\": \"1.0.0\"
                    },
                    \"spans\": [{
                      \"traceId\": \"$TRACE_ID\",
                      \"spanId\": \"$SPAN_ID\",
                      \"name\": \"$OPERATION\",
                      \"kind\": 1,
                      \"startTimeUnixNano\": \"$START_TIME\",
                      \"endTimeUnixNano\": \"$END_TIME\",
                      \"attributes\": [{
                        \"key\": \"test.iteration\",
                        \"value\": {\"intValue\": $i}
                      }, {
                        \"key\": \"test.type\",
                        \"value\": {\"stringValue\": \"load-test\"}
                      }],
                      \"status\": {\"code\": 1}
                    }]
                  }]
                }]
              }" > /dev/null
            
            sleep 2
          done
          
          echo "✓ Load generation completed - 10 traces sent"

---
# 7. Cleanup Job
apiVersion: batch/v1
kind: Job
metadata:
  name: tempo-test-cleanup
  namespace: monitoring
  labels:
    app: tempo-test
    test-type: cleanup
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: cleanup
        image: bitnami/kubectl:1.29
        command:
        - /bin/sh
        - -c
        - |
          echo "=== Tempo Test Cleanup ==="
          
          # Delete test jobs (keep this cleanup job)
          kubectl delete job -n monitoring -l app=tempo-test,test-type!=cleanup --ignore-not-found=true
          
          # Delete test app
          kubectl delete deployment,service -n monitoring -l app=tempo-test-app --ignore-not-found=true
          
          echo "✓ Cleanup completed"
